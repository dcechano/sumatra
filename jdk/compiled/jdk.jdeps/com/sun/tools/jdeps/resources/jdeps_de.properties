artifact.not.found=nicht gefunden
err.command.set=Die Optionen {0} und {1} werden angegeben.
err.exception.message={0}
err.filter.not.specified=Die Optionen --package (-p), --regex (-e), --require müssen angegeben werden
err.genmoduleinfo.not.jarfile={0} ist eine modulare JAR-Datei, die nicht mit der Option --generate-module-info angegeben werden kann
err.genmoduleinfo.unnamed.package={0} enthält ein unbenanntes Package, das in einem Modul nicht zulässig ist
err.invalid.arg.for.option=ungültiges Argument für Option\: {0}
err.invalid.filters=Nur eine der Optionen --package (-p), --regex (-e), --require darf angegeben werden
err.invalid.options={0} kann nicht mit der Option {1} verwendet werden
err.invalid.path=ungültiger Pfad\: {0}
err.missing.arg=kein Wert angegeben für {0}
err.missing.dependences=Fehlende Abhängigkeiten\: Klassen wurden im Modulpfad und Klassenpfad nicht gefunden.\nUm diesen Fehler zu unterdrücken und fortzufahren, verwenden Sie --ignore-missing-deps.
err.module.not.found=Modul nicht gefunden\: {0}
err.multirelease.jar.malformed=nicht wohlgeformte Multi-Release-JAR, {0}, ungültiger Eintrag\: {1}
err.multirelease.option.exists={0} ist keine Multi-Release-JAR-Datei, aber die Option --multi-release ist festgelegt
err.multirelease.option.notfound={0} ist eine Multi-Release-JAR-Datei, aber die Option --multi-release ist nicht festgelegt
err.multirelease.version.associated=Klasse {0} ist bereits mit Version {1} verknüpft, und es wird versucht, Version {2} hinzuzufügen
err.option.after.class=Option muss angegeben werden vor den Klassen\: {0}
err.option.already.specified=Option {0} wurde mehrmals angegeben.
err.root.module.not.set=Root-Modulset leer
err.unknown.option=unbekannte Option\: {0}
error.prefix=Fehler\:
internal.api.column.header=JDK-interne API
inverse.transitive.dependencies.matching=Inverse transitive Abhängigkeiten, die übereinstimmen mit {0}
inverse.transitive.dependencies.on=Inverse transitive Abhängigkeiten von {0}
jdeps.description=Abhängigkeits-Analyzer für Java-Klassen starten
jdeps.wiki.url=https\://wiki.openjdk.org/display/JDK8/Java+Dependency+Analysis+Tool
main.opt.I=\  -I\n  --inverse                     Analysiert die Abhängigkeiten gemäß den anderen angegebenen\n                                Optionen und findet alle Artefakte, die direkt und\n                                indirekt von den übereinstimmenden Knoten abhängen.\n                                Dies entspricht der Umkehrung der\n                                Analyse der Kompilierungszeitansicht und gibt die\n                                Abhängigkeitsübersicht aus. Diese Option muss mit der Option\n                                --require, --package oder --regex verwendet werden.
main.opt.R=\  -R\n  --recursive                   Traversiert rekursiv alle Laufzeitabhängigkeiten.\n                                Die Option -R impliziert -filter\:none. Falls eine Option -p,\n                                -e, -f angegeben ist, werden nur die übereinstimmenden\n                                Abhängigkeiten analysiert.
main.opt.add-modules=\  --add-modules <Modulname>[,<Modulname>...]\n                                Fügt dem Root-Set Module zur Analyse hinzu
main.opt.apionly=\  -apionly\n  --api-only                    Beschränkt die Analyse auf APIs, d.h. Abhängigkeiten\n                                von der Signatur öffentlicher und geschützter\n                                Mitglieder von öffentlichen Klassen, einschließlich von\n                                Feldtyp, Methodenparametertypen, Rückgabetyp,\n                                aktivierten Ausnahmetypen usw.
main.opt.check=\  --check <Modulname>[,<Modulname>...\n                                Analysiert die Abhängigkeit der angegebenen Module\n                                Gibt den Moduldeskriptor, die aus der Analyse resultierenden\n                                Modulabhängigkeiten und das Diagramm nach\n                                der Übergangsreduktion aus. Identifiziert auch\n                                nicht verwendete qualifizierte Exporte.
main.opt.compile-time=\  --compile-time                Kompilierungszeitansicht transitiver Abhängigkeiten,\n                                d.h. Kompilierungszeitansicht der Option -R.\n                                Analysiert die Abhängigkeiten gemäß den anderen angegebenen Optionen\n                                Wird eine Abhängigkeit von einem Verzeichnis,\n                                einer JAR-Datei oder einem Modul gefunden, werden alle Klassen im \n                                entsprechenden beinhaltenden Archiv analysiert.
main.opt.cp=\  -cp <Pfad>\n  -classpath <Pfad>\n  --class-path <Pfad>           Gibt an, wo sich die Klassendateien befinden
main.opt.depth=\  -depth\=<Tiefe>                Gibt die Tiefe der transitiven\n                                Abhängigkeitsanalyse an
main.opt.dotoutput=\  -dotoutput <Verzeichnis>\n  --dot-output <Verzeichnis>            Zielverzeichnis für DOT-Dateiausgabe
main.opt.e=\  -e <Regex>\n  -regex <Regex>\n  --regex <Regex>               Findet Abhängigkeiten, die dem angegebenen Muster entsprechen.
main.opt.f=\  -f <Regex> -filter <Regex>    Filtert Abhängigkeiten nach dem angegebenen\n                                Muster. Bei Angabe mehrerer Muster wird das\n                                letzte Muster verwendet.\n  -filter\:package               Filtert Abhängigkeiten innerhalb eines Packages.\n                                Dies ist die Standardoption.\n  -filter\:archive               Filtert Abhängigkeiten innerhalb eines Archivs.\n  -filter\:module                Filtert Abhängigkeiten innerhalb eines Moduls.\n  -filter\:none                  Kein Filtern nach -filter\:package oder -filter\:archive\n                                Die mit der Option -filter angegebene Filterung\n                                wird jedoch angewendet.\n
main.opt.generate-module-info=\  --generate-module-info <Verzeichnis>  Generiert module-info.java im angegebenen\n                                Verzeichnis. Die angegebenen JAR-Dateien werden\n                                analysiert. Diese Option kann nicht zusammen mit\n                                --dot-output oder --class-path verwendet werden. Verwenden Sie\n                                für offene Module die Option --generate-open-module.
main.opt.generate-open-module=\  --generate-open-module <Verzeichnis>  Generiert module-info.java für die angegebenen\n                                JAR-Dateien im angegebenen Verzeichnis als\n                                offene Module. Diese Option kann nicht mit\n                                --dot-output oder --class-path verwendet werden.
main.opt.h=\  -h -? --help                  Gibt diese Hilfemeldung aus
main.opt.ignore-missing-deps=\  --ignore-missing-deps         Ignoriert fehlende Abhängigkeiten.
main.opt.include=\nOptionen zum Filtern der zu analysierenden Klassen\:\n  -include <Regex>              Beschränkt die Analyse auf Klassen, die dem Muster entsprechen\n                                Diese Option filtert die Liste der zu analysierenden\n                                Klassen. Sie kann zusammen mit -p und -e verwendet\n                                werden, die das Muster auf die Abhängigkeiten anwenden
main.opt.jdkinternals=\  -jdkinternals\n  --jdk-internals               Findet Abhängigkeiten auf Klassenebene auf JDK-internen\n                                APIs. Analysiert standardmäßig alle Klassen\n                                in --class-path und Eingabedateien, es sei denn, die Option\n                                -include ist angegeben. Diese Option kann nicht mit\n                                den Optionen -p, -e und -s verwendet werden.\n                                WARNUNG\: Auf JDK-interne APIs besteht kein Zugriff.
main.opt.list-deps=\  --list-deps                   Listet die Modulabhängigkeiten auf. Gibt auch\n                                interne API-Packages aus, falls referenziert.\n                                Diese Option analysiert transitiv die Librarys im\n                                Classpath und im Modulpfad, falls referenziert.\n                                Verwenden Sie die Option --no-recursive für eine\n                                nicht transitive Abhängigkeitsanalyse.
main.opt.list-reduced-deps=\  --list-reduced-deps           Gleich wie --list-deps, listet jedoch die Kanten für die\n                                implizierten Lesevorgänge aus dem Moduldiagramm nicht auf.\n                                Wenn Modul M1 M2 liest und M2 über M3\n                                transitiv sein muss, dann wird impliziert, dass M1 M3 liest,\n                                und dies wird im Diagramm nicht angezeigt.
main.opt.m=\nOptionen für die Modulabhängigkeitsanalyse\:\n  -m <Modulname>\n  --module <Modulname>        Gibt das Root-Modul für die Analyse an
main.opt.missing-deps=\  --missing-deps                Findet fehlende Abhängigkeiten. Diese Option\n                                kann nicht mit den Optionen -p, -e und -s verwendet werden.
main.opt.module-path=\  --module-path <Modulpfad>   Gibt den Modulpfad an
main.opt.multi-release=\  --multi-release <Version>     Gibt bei Verarbeitung von Multi-Release-JAR-Dateien\n                                die Version an. <Version> muss eine\n                                Ganzzahl >\= 9 oder ein Basiswert sein.
main.opt.no-recursive=\  --no-recursive                Kein rekursives Traversieren von Abhängigkeiten.
main.opt.p=\nOptionen zum Filtern von Abhängigkeiten\:\n  -p <Pkg>\n  -package <Pkg>\n  --package <Pkg>               Findet Abhängigkeiten, die mit dem angegebenen\n                                Packagenamen übereinstimmen (kann mehrfach angegeben werden).
main.opt.print-module-deps=\  --print-module-deps           Gleich wie --list-reduced-deps, und es wird\n                                eine kommagetrennte Liste von Modulabhängigkeiten ausgegeben.\n                                Dies Ausgabe kann von der jlink-Option --add-modules\n                                verwendet werden, um ein benutzerdefiniertes Image zu erstellen,\n                                das diese Module und ihre transitiven Abhängigkeiten enthält.
main.opt.q=\  -q       -quiet               Unterdrückt Warnmeldungen
main.opt.require=\  --require <Modulname>       Findet Abhängigkeiten, die dem angegebenen Modulnamen\n                                entsprechen (kann mehrfach angegeben werden). --package,\n                                --regex, --require schließen sich gegenseitig aus.
main.opt.s=\  -s       -summary             Gibt nur die Abhängigkeitsübersicht aus.
main.opt.system=\  --system <Java-Home>          Gibt einen alternativen Systemmodulpfad an
main.opt.upgrade-module-path=\  --upgrade-module-path <Modulpfad>  Gibt den Upgrademodulpfad an
main.opt.v=\  -v       -verbose             Gibt alle Abhängigkeiten auf Klassenebene aus\n                                Äquivalent zu -verbose\:class -filter\:none.\n  -verbose\:package              Gibt standardmäßig Abhängigkeiten auf Packageebene, ausgenommen\n                                Abhängigkeiten innerhalb eines Packages, aus\n  -verbose\:class                Gib standardmäßig Abhängigkeiten auf Klassenebene, ausgenommen\n                                Abhängigkeiten innerhalb einer Klasse, aus
main.opt.version=\  -version --version            Versionsinformationen
main.usage.summary=Verwendung\: {0} <Optionen> <Pfad ...>]\nmit --help können Sie eine Liste der möglichen Optionen aufrufen
main.usage=Verwendung\: {0} <Optionen> <Pfad ...>]\n<Pfad> kann ein Pfad zu einer Klassendatei, einem Verzeichnis oder einer JAR-Datei sein.\n\nMögliche Optionen\:
public.api.replacement.column.header=Vorgeschlagene Ersetzung
warn.deprecated.option=Option {0} ist veraltet und wird möglicherweise in einem zukünftigen Release entfernt.
warn.invalid.arg=Pfad ist nicht vorhanden\: {0}
warn.prefix=Warnung\:
warn.replace.useJDKInternals=JDK-interne APIs werden nicht unterstützt und sind privat für JDK-Implementierungen.\nSie könnten ohne Berücksichtigung der Kompatibilität geändert oder entfernt werden und die Anwendung beschädigen.\nÄndern Sie den Code, um Abhängigkeiten von JDK-internen APIs zu beseitigen.\nDie neuesten Informationen zu JDK-internen API-Ersetzungen finden Sie hier\:\n{0}
warn.skipped.entry={0}
warn.split.package=geteiltes Package\: {0} {1}
